// Generated by CoffeeScript 1.6.2
(function() {
  var Backend, auth, isArray;

  isArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  auth = function(restMethod) {
    return function(method) {
      return function() {
        var data, entity, id, result, strategy, _ref,
          _this = this;

        _ref = this._urlPartify(arguments[0]), entity = _ref[0], id = _ref[1];
        data = arguments[1];
        if (this.authenticatedAs === 'guest') {
          if (entity !== 'user' && entity !== 'index') {
            throw new Error('Access denied');
          }
        }
        strategy = {
          get: function() {
            var group, res;

            if (_this.authenticatedAs === 'guest') {
              throw new Error('Access denied');
            }
            if (entity === "index") {
              if (!id) {
                group = ["operator"];
                if (_this.authenticatedAs !== "operator") {
                  group.push(_this.authenticatedAs);
                }
                if (_this.whois) {
                  return res = {
                    whois: _this.whois,
                    group: group
                  };
                }
              }
            }
          },
          post: function() {
            var found, operator;

            if (_this.authenticatedAs === 'guest') {
              if (entity === 'user') {
                if (id) {
                  throw new Error('Access denied');
                }
              }
              if (entity === 'index') {
                if (!id) {
                  throw new Error('Access denied');
                }
              }
            }
            if (_this.authenticatedAs === "operator") {
              if (entity === "index") {
                if (!id) {
                  throw new Error('Access denied');
                }
              }
            }
            if (entity === "index") {
              if (id) {
                if (_this.mockDB.operator) {
                  found = _this.mockDB.operator.filter(function(obj) {
                    return obj.password === data.password && obj.login === id;
                  });
                  if (found.length) {
                    operator = found[0];
                    _this.whois = operator.login;
                    _this.authenticatedAs = 'operator';
                    if (operator.isAdmin) {
                      return _this.authenticatedAs = 'admin';
                    }
                  } else {
                    throw new Error("Access denied");
                  }
                }
              } else {
                if (_this.authenticatedAs === "admin") {
                  if (!_this.mockDB.operator) {
                    _this.mockDB.operator = [];
                  }
                  data.isAdmin = false;
                  return _this.mockDB.operator.push(data);
                }
              }
            }
          },
          put: function() {
            var found, operator;

            if (_this.authenticatedAs === 'guest') {
              throw new Error('Access denied');
            }
            if (_this.authenticatedAs === "operator") {
              if (entity === "index") {
                if (id) {
                  throw new Error("Access denied");
                }
                if (_this.mockDB.operator) {
                  found = _this.mockDB.operator.filter(function(obj) {
                    return obj.password === data.old_password && obj.login === _this.whois;
                  });
                  if (found.length) {
                    operator = found[0];
                    operator.password = data.new_password;
                  } else {
                    throw new Error("Access denied");
                  }
                }
              }
            }
            if (_this.authenticatedAs === "admin") {
              if (entity === "index") {
                if (id) {
                  if (_this.mockDB.operator) {
                    found = _this.mockDB.operator.filter(function(obj) {
                      return obj.login === id;
                    });
                    if (found.length) {
                      operator = found[0];
                      return operator.password = data.new_password;
                    }
                  }
                }
              }
            }
          },
          "delete": function() {
            if (_this.authenticatedAs === 'guest') {
              throw new Error('Access denied');
            }
            if (entity === "index") {
              _this.authenticatedAs = "guest";
              return _this.whois = void 0;
            }
          }
        };
        result = strategy[restMethod]();
        if (result) {
          return result;
        }
        return method.apply(this, arguments);
      };
    };
  };

  Backend = (function() {
    function Backend(prefix) {
      this.prefix = prefix != null ? prefix : "/api";
      this.authenticatedAs = 'guest';
      this.mockDB = {};
    }

    Backend.prototype._saveLastRequest = function(method, url, data) {
      if (isArray(url)) {
        url = url.join("/");
      }
      this.lastRequest = {
        method: method,
        url: "" + this.prefix + "/" + url,
        data: data
      };
      return false;
    };

    Backend.prototype._urlPartify = function(url) {
      if (!isArray(url)) {
        return url.split('/');
      } else {
        return url;
      }
    };

    Backend.prototype._withId = function(id, entity, data, withId, withoutId) {
      if (!id) {
        return withoutId.apply(this, [entity, data]);
      } else {
        return withId.apply(this, [entity, id, data]);
      }
    };

    Backend.prototype.getWithoutId = function(entity, data) {
      var limit, res, skip, skiplimitsum;

      skip = data.skip;
      delete data.skip;
      limit = data.limit;
      delete data.limit;
      skiplimitsum = skip + limit;
      if (!skiplimitsum) {
        skiplimitsum = void 0;
      }
      res = this.mockDB[entity].filter(function(obj) {
        var flag, k, v;

        flag = true;
        for (k in data) {
          v = data[k];
          if (obj[k] !== v) {
            flag = false;
            break;
          }
        }
        return flag;
      });
      return res.slice(skip, skiplimitsum).reverse();
    };

    Backend.prototype.getWithId = function(entity, id, data) {
      var obj, _i, _len, _ref;

      if (this.mockDB[entity]) {
        _ref = this.mockDB[entity];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          if (String(obj.id) === id) {
            return obj;
          }
        }
      }
    };

    Backend.prototype.putWithoutId = function(entity, data) {
      return false;
    };

    Backend.prototype.putWithId = function(entity, id, data) {
      var k, obj, v, _i, _len, _ref;

      if (this.mockDB[entity]) {
        _ref = this.mockDB[entity];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          if (!(String(obj.id) === id)) {
            continue;
          }
          for (k in data) {
            v = data[k];
            obj[k] = v;
          }
          return true;
        }
        data.id = id;
        this.mockDB[entity].push(data);
        return true;
      }
    };

    Backend.prototype.postWithoutId = function(entity, data) {
      var maxid, obj, _i, _len, _ref;

      if (this.mockDB[entity]) {
        maxid = 0;
        _ref = this.mockDB[entity];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          if (maxid < obj.id) {
            maxid = obj.id;
          }
        }
        maxid += 1;
        data.id = maxid;
        this.mockDB[entity].push(data);
        return [entity, "" + maxid];
      }
    };

    Backend.prototype.postWithId = function(entity, id, data) {
      return false;
    };

    Backend.prototype.deleteWithoutId = function(entity, data) {
      this.mockDB[entity] = [];
      return true;
    };

    Backend.prototype.deleteWithId = function(entity, id, data) {
      if (this.mockDB[entity]) {
        this.mockDB[entity] = this.mockDB[entity].filter(function(obj) {
          return String(obj.id) !== id;
        });
        return true;
      }
    };

    Backend.prototype.get = auth('get')(function(url, data) {
      var entity, id, _ref;

      if (url == null) {
        url = "";
      }
      if (data == null) {
        data = {};
      }
      this._saveLastRequest("get", url, data);
      _ref = this._urlPartify(url), entity = _ref[0], id = _ref[1];
      return this._withId(id, entity, data, this.getWithId, this.getWithoutId);
    });

    Backend.prototype.put = auth('put')(function(url, data) {
      var entity, id, _ref;

      if (url == null) {
        url = "";
      }
      if (data == null) {
        data = {};
      }
      this._saveLastRequest("put", url, data);
      _ref = this._urlPartify(url), entity = _ref[0], id = _ref[1];
      return this._withId(id, entity, data, this.putWithId, this.putWithoutId);
    });

    Backend.prototype.post = auth('post')(function(url, data) {
      var entity, id, _ref;

      if (url == null) {
        url = "";
      }
      if (data == null) {
        data = {};
      }
      this._saveLastRequest("post", url, data);
      _ref = this._urlPartify(url), entity = _ref[0], id = _ref[1];
      return this._withId(id, entity, data, this.postWithId, this.postWithoutId);
    });

    Backend.prototype["delete"] = auth('delete')(function(url, data) {
      var entity, id, _ref;

      if (url == null) {
        url = "";
      }
      if (data == null) {
        data = {};
      }
      this._saveLastRequest("delete", url, data);
      _ref = this._urlPartify(url), entity = _ref[0], id = _ref[1];
      return this._withId(id, entity, data, this.deleteWithId, this.deleteWithoutId);
    });

    return Backend;

  })();

  module.exports = Backend;

}).call(this);
