// Generated by CoffeeScript 1.3.3
(function() {

  describe("User", function() {
    beforeEach(function() {
      return beforeEachTest.apply(this);
    });
    it("should exists", function() {
      var user;
      return user = new User;
    });
    it("should have name, surname, patronymic, status", function() {
      var user;
      user = new User;
      expect(user.name).toBeDefined();
      expect(user.surname).toBeDefined();
      expect(user.patronymic).toBeDefined();
      return expect(user.status).toBeDefined();
    });
    it("should have default status 'new'", function() {
      var user;
      user = new User;
      return expect(user.status).toBe("new");
    });
    it("should be possible to pass attributes through constructor", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false, "emailsent");
      expect(user.name).toBe("Alex");
      expect(user.surname).toBe("Fedorov");
      expect(user.patronymic).toBe("Konstantinovich");
      expect(user.participant).toBeFalsy();
      return expect(user.status).toBe("emailsent");
    });
    it("should have methods: create, getById, list, listFiltered, update", function() {
      var user;
      user = new User;
      expect(user.create).toBeFunction();
      expect(user.getById).toBeFunction();
      expect(user.list).toBeFunction();
      expect(user.listFiltered).toBeFunction();
      return expect(user.update).toBeFunction();
    });
    it("should be possible to setup custom backend", function() {
      var user;
      user = new User;
      user.setup(new Backend);
      return expect(user.backend).toBeInstanceOf(Backend);
    });
    it("should have restfull backend by default", function() {
      var user;
      user = new User;
      expect(user.backend).toBeInstanceOf(Backend);
      return expect(user.backend).toBeInstanceOf(Restfull);
    });
    it("should be possible to create new user", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false);
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      expect(user.create()).toBeTruthy();
      return expect(user.backend.mockDB.user.length).toBe(1);
    });
    it("should store id when creating new user", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false);
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.create();
      return expect(user.id).toBeDefined();
    });
    it("should be possible to get user by id", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      res = user.getById(331);
      return expect(res).toBeJson({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
    });
    it("should be possible to get list of users in reverse chronological order", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      res = user.list();
      expect(res.length).toBe(2);
      expect(res[0].id).toBe(332);
      return expect(res[1].id).toBe(331);
    });
    it("should be possible to use skip/limit filters", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 333,
        name: "Ivan",
        surname: "Ivanov",
        patronymic: "Ivanovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 334,
        name: "Vasya",
        surname: "Pupkin",
        patronymic: "Emailovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 335,
        name: "Petya",
        surname: "Petrov",
        patronymic: "Petrovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 336,
        name: "Ekaterina",
        surname: "Новгородская",
        patronymic: "Ивановна",
        participant: false,
        status: "emailsent"
      });
      user.status = void 0;
      user.participant = void 0;
      res = user.listFiltered(2, 3);
      expect(res.length).toBe(3);
      expect(res[0].id).toBe(335);
      expect(res[1].id).toBe(334);
      return expect(res[2].id).toBe(333);
    });
    it("should be possible to use participant and status filters", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: true,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 333,
        name: "Ivan",
        surname: "Ivanov",
        patronymic: "Ivanovich",
        participant: true,
        status: "paid"
      });
      user.backend.mockDB.user.push({
        id: 334,
        name: "Vasya",
        surname: "Pupkin",
        patronymic: "Emailovich",
        participant: true,
        status: "paid"
      });
      user.backend.mockDB.user.push({
        id: 335,
        name: "Petya",
        surname: "Petrov",
        patronymic: "Petrovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 336,
        name: "Ekaterina",
        surname: "Новгородская",
        patronymic: "Ивановна",
        participant: false,
        status: "emailsent"
      });
      user.status = "new";
      user.participant = false;
      res = user.listFiltered();
      expect(res.length).toBe(2);
      expect(res[0].id).toBe(335);
      return expect(res[1].id).toBe(331);
    });
    it("should be possible to update object", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend.authenticatedAs = 'admin';
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      user.update(331, "emailsent");
      res = user.getById(331);
      return expect(res.status).toBe("emailsent");
    });
    it("should have academicDegree", function() {
      var user;
      user = new User;
      return expect(user.academicDegree).toBeDefined();
    });
    it("should have academicTitle", function() {
      var user;
      user = new User;
      return expect(user.academicTitle).toBeDefined();
    });
    it("should have jobPosition", function() {
      var user;
      user = new User;
      return expect(user.jobPosition).toBeDefined();
    });
    it("should have jobPlace", function() {
      var user;
      user = new User;
      return expect(user.jobPlace).toBeDefined();
    });
    it("should have city", function() {
      var user;
      user = new User;
      return expect(user.city).toBeDefined();
    });
    it("should have country", function() {
      var user;
      user = new User;
      return expect(user.country).toBeDefined();
    });
    it("should have postalAddress", function() {
      var user;
      user = new User;
      return expect(user.postalAddress).toBeDefined();
    });
    it("should have email", function() {
      var user;
      user = new User;
      return expect(user.email).toBeDefined();
    });
    it("should have phone", function() {
      var user;
      user = new User;
      return expect(user.phone).toBeDefined();
    });
    it("should have participantType", function() {
      var user;
      user = new User;
      return expect(user.participantType).toBeDefined();
    });
    it("should have lectureTitle", function() {
      var user;
      user = new User;
      return expect(user.lectureTitle).toBeDefined();
    });
    it("should have sectionNumber", function() {
      var user;
      user = new User;
      return expect(user.sectionNumber).toBeDefined();
    });
    it("should have monographyParticipant", function() {
      var user;
      user = new User;
      return expect(user.monographyParticipant).toBeDefined();
    });
    it("should have setMonographyParticipant method", function() {
      var user;
      user = new User;
      return expect(user.setMonographyParticipant).toBeFunction();
    });
    it("should have monographyTitle if monographyParticipant is true", function() {
      var user;
      user = new User;
      expect(user.monographyTitle).toBeUndefined();
      user.setMonographyParticipant(true);
      return expect(user.monographyTitle).toBeDefined();
    });
    it("should have stayDemand", function() {
      var user;
      user = new User;
      return expect(user.stayDemand).toBeDefined();
    });
    it("should have setStayDemand method", function() {
      var user;
      user = new User;
      return expect(user.setStayDemand).toBeFunction();
    });
    it("should have stayStart and stayEnd if stayDemand is true", function() {
      var user;
      user = new User;
      expect(user.stayStart).toBeUndefined();
      expect(user.stayEnd).toBeUndefined();
      user.setStayDemand(true);
      expect(user.stayStart).toBeDefined();
      return expect(user.stayEnd).toBeDefined();
    });
    return it("shouldnt have participant", function() {
      var user;
      user = new User;
      return expect(user.participant).toBeUndefined();
    });
  });

}).call(this);
