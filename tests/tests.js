// Generated by CoffeeScript 1.6.1
(function() {
  var _;

  global.Backend = require("./backend");

  global.Restfull = require("./restfull");

  global.User = require("./user");

  _ = require("lodash");

  global.beforeEachTest = function() {
    return this.addMatchers({
      toBeFunction: function() {
        return _.isFunction(this.actual);
      },
      toBeJson: function(obj) {
        if (obj) {
          return JSON.stringify(this.actual) === JSON.stringify(obj);
        } else {
          return {}.toString.call(this.actual) === "[object Object]";
        }
      },
      toBeArray: function() {
        return this.actual.length !== void 0;
      },
      toBeInstanceOf: function(obj) {
        return this.actual instanceof obj;
      }
    });
  };

  describe("User", function() {
    beforeEach(function() {
      return beforeEachTest.apply(this);
    });
    it("should exists", function() {
      var user;
      return user = new User;
    });
    it("should have name, surname, patronymic, participant, status", function() {
      var user;
      user = new User;
      expect(user.name).toBeDefined();
      expect(user.surname).toBeDefined();
      expect(user.patronymic).toBeDefined();
      expect(user.participant).toBeDefined();
      return expect(user.status).toBeDefined();
    });
    it("should have default status 'new'", function() {
      var user;
      user = new User;
      return expect(user.status).toBe("new");
    });
    it("should be possible to pass attributes through constructor", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false, "emailsent");
      expect(user.name).toBe("Alex");
      expect(user.surname).toBe("Fedorov");
      expect(user.patronymic).toBe("Konstantinovich");
      expect(user.participant).toBeFalsy();
      return expect(user.status).toBe("emailsent");
    });
    it("should have methods: create, getById, list, listFiltered, update", function() {
      var user;
      user = new User;
      expect(user.create).toBeFunction();
      expect(user.getById).toBeFunction();
      expect(user.list).toBeFunction();
      expect(user.listFiltered).toBeFunction();
      return expect(user.update).toBeFunction();
    });
    it("should be possible to setup custom backend", function() {
      var user;
      user = new User;
      user.setup(new Backend);
      return expect(user.backend).toBeInstanceOf(Backend);
    });
    it("should have restfull backend by default", function() {
      var user;
      user = new User;
      expect(user.backend).toBeInstanceOf(Backend);
      return expect(user.backend).toBeInstanceOf(Restfull);
    });
    it("should be possible to create new user", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false);
      user.setup(new Backend);
      user.backend["delete"]("user");
      expect(user.create()).toBeTruthy();
      return expect(user.backend.mockDB.user.length).toBe(1);
    });
    it("should store id when creating new user", function() {
      var user;
      user = new User('Alex', 'Fedorov', 'Konstantinovich', false);
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.create();
      return expect(user.id).toBeDefined();
    });
    it("should be possible to get user by id", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      res = user.getById(331);
      return expect(res).toBeJson({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
    });
    it("should be possible to get list of users in reverse chronological order", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      res = user.list();
      expect(res.length).toBe(2);
      expect(res[0].id).toBe(332);
      return expect(res[1].id).toBe(331);
    });
    it("should be possible to use skip/limit filters", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 333,
        name: "Ivan",
        surname: "Ivanov",
        patronymic: "Ivanovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 334,
        name: "Vasya",
        surname: "Pupkin",
        patronymic: "Emailovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 335,
        name: "Petya",
        surname: "Petrov",
        patronymic: "Petrovich",
        participant: false,
        status: "emailsent"
      });
      user.backend.mockDB.user.push({
        id: 336,
        name: "Ekaterina",
        surname: "Новгородская",
        patronymic: "Ивановна",
        participant: false,
        status: "emailsent"
      });
      user.status = void 0;
      user.participant = void 0;
      res = user.listFiltered(2, 3);
      expect(res.length).toBe(3);
      expect(res[0].id).toBe(335);
      expect(res[1].id).toBe(334);
      return expect(res[2].id).toBe(333);
    });
    it("should be possible to use participant and status filters", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: true,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 333,
        name: "Ivan",
        surname: "Ivanov",
        patronymic: "Ivanovich",
        participant: true,
        status: "paid"
      });
      user.backend.mockDB.user.push({
        id: 334,
        name: "Vasya",
        surname: "Pupkin",
        patronymic: "Emailovich",
        participant: true,
        status: "paid"
      });
      user.backend.mockDB.user.push({
        id: 335,
        name: "Petya",
        surname: "Petrov",
        patronymic: "Petrovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 336,
        name: "Ekaterina",
        surname: "Новгородская",
        patronymic: "Ивановна",
        participant: false,
        status: "emailsent"
      });
      user.status = "new";
      user.participant = false;
      res = user.listFiltered();
      expect(res.length).toBe(2);
      expect(res[0].id).toBe(335);
      return expect(res[1].id).toBe(331);
    });
    return it("should be possible to update object", function() {
      var res, user;
      user = new User;
      user.setup(new Backend);
      user.backend["delete"]("user");
      user.backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      user.backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      user.update(331, "emailsent");
      res = user.getById(331);
      return expect(res.status).toBe("emailsent");
    });
  });

  describe("Backend", function() {
    beforeEach(function() {
      return beforeEachTest.apply(this);
    });
    it("should exists", function() {
      var backend;
      return backend = new Backend;
    });
    it("should have rest methods", function() {
      var backend;
      backend = new Backend;
      expect(backend.get).toBeFunction();
      expect(backend.put).toBeFunction();
      expect(backend.post).toBeFunction();
      return expect(backend["delete"]).toBeFunction();
    });
    it("should have attribute authenticatedAs", function() {
      var backend;
      backend = new Backend;
      return expect(backend.authenticatedAs).toBeDefined();
    });
    it("should have authenticatedAs = guest by default", function() {
      var backend;
      backend = new Backend;
      return expect(backend.authenticatedAs).toBe("guest");
    });
    it("should have default prefix /api", function() {
      var backend;
      backend = new Backend;
      return expect(backend.prefix).toBe("/api");
    });
    it("should save last request info: method, url, data", function() {
      var backend;
      backend = new Backend;
      backend.get(["user", "127"]);
      expect(backend.lastRequest).toBeJson({
        method: "get",
        url: "" + backend.prefix + "/user/127",
        data: {}
      });
      backend.put(["user", "33"], {
        name: "Illya"
      });
      expect(backend.lastRequest).toBeJson({
        method: "put",
        url: "" + backend.prefix + "/user/33",
        data: {
          name: "Illya"
        }
      });
      backend.post("user", {
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      expect(backend.lastRequest).toBeJson({
        method: "post",
        url: "" + backend.prefix + "/user",
        data: {
          name: "Alex",
          surname: "Fedorov",
          patronymic: "Konstantinovich",
          participant: false,
          status: "new"
        }
      });
      backend["delete"](["user", "37"]);
      return expect(backend.lastRequest).toBeJson({
        method: "delete",
        url: "" + backend.prefix + "/user/37",
        data: {}
      });
    });
    it("should return object when get with id and with exactly that id", function() {
      var backend, obj;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      obj = backend.get(["user", "331"]);
      expect(obj).toBeJson();
      return expect(obj.id).toBe(331);
    });
    it("should return list when get without id", function() {
      var backend, obj;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      obj = backend.get("user");
      expect(obj.length).toBe(2);
      expect(obj[0].id).toBe(332);
      return expect(obj[1].id).toBe(331);
    });
    it("shouldnt reverse inner data when get without id but only result", function() {
      var backend, obj;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      obj = backend.get("user");
      expect(obj.length).toBe(2);
      expect(obj[0].id).toBe(332);
      expect(obj[1].id).toBe(331);
      obj = backend.get("user");
      expect(obj.length).toBe(2);
      expect(obj[0].id).toBe(332);
      return expect(obj[1].id).toBe(331);
    });
    it("should modify when put with id", function() {
      var backend, obj, res;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      res = backend.put(["user", "332"], {
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "paid"
      });
      expect(res).toBeTruthy();
      obj = backend.get(["user", "332"]);
      return expect(obj).toBeJson({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "paid"
      });
    });
    it("should return false when put without id", function() {
      var backend, res;
      backend = new Backend;
      backend.mockDB.user = [];
      res = backend.put("user", ["hello", "world"]);
      return expect(res).toBeFalsy();
    });
    it("should return false when post with id", function() {
      var backend;
      backend = new Backend;
      return expect(backend.post(["user", "123"])).toBeFalsy();
    });
    it("should create new entry when post without id", function() {
      var backend, found, res;
      backend = new Backend;
      backend.mockDB.user = [];
      res = backend.post("user", {
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      expect(res).toBeArray();
      expect(res.length).toBe(2);
      found = backend.get(res);
      return expect(found).toBeJson({
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent",
        id: parseInt(res[1])
      });
    });
    it("should wipe entire collection when delete without id", function() {
      var backend;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      expect(backend["delete"]("user")).toBeTruthy();
      return expect(backend.mockDB.user.length).toBe(0);
    });
    return it("should remove one object when delete with id", function() {
      var backend;
      backend = new Backend;
      backend.mockDB.user = [];
      backend.mockDB.user.push({
        id: 331,
        name: "Alex",
        surname: "Fedorov",
        patronymic: "Konstantinovich",
        participant: false,
        status: "new"
      });
      backend.mockDB.user.push({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
      expect(backend["delete"](["user", "331"])).toBeTruthy();
      expect(backend.mockDB.user.length).toBe(1);
      return expect(backend.mockDB.user[0]).toBeJson({
        id: 332,
        name: "Maxim",
        surname: "Baz",
        patronymic: "Vitalievich",
        participant: false,
        status: "emailsent"
      });
    });
  });

}).call(this);
