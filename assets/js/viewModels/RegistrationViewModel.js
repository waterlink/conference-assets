// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require("../classes/restfull");

  global.Geoip = require("../classes/geoip");

  window.RegistrationViewModel = (function() {
    function RegistrationViewModel() {
      this.isAvailableDateToStay = __bind(this.isAvailableDateToStay, this);
      var p, rest,
        _this = this;

      this.start = new Date;
      this.end = new Date;
      this.start.setDate(this.start.getDate() - 7);
      this.end.setDate(this.end.getDate() + 7);
      this.thesisPay = function() {
        return _this.mainCost();
      };
      this.monographyPay = function() {
        return _this.totalCost() - _this.mainCost();
      };
      this.conference = {};
      this.conference.dates = ko.observable("1-4 октября 2013 г.");
      this.conference.fullTitle = ko.observable("ІV Международная научно-практическая конференция «РЕФЛЕКСИВНЫЕ ПРОЦЕССЫ И УПРАВЛЕНИЕ В ЭКОНОМИКЕ»");
      this.conference.title = ko.computed(function() {
        return "" + (_this.conference.fullTitle()) + " " + (_this.conference.dates());
      });
      this.conference.registrationTitle = ko.computed(function() {
        return "Регистрация - " + (_this.conference.title());
      });
      this.conference.shortTitleSource = ko.observable("РЕФЛЕКСИВНЫЕ ПРОЦЕССЫ И УПРАВЛЕНИЕ В ЭКОНОМИКЕ");
      this.conference.shortTitle = ko.computed(function() {
        return "" + (_this.conference.shortTitleSource()) + " " + (_this.conference.dates());
      });
      this.conference.monographyMin = ko.observable(10);
      this.conference.monographyMax = ko.observable(15);
      this.conference.costByMonographyPage = ko.observable(25);
      rest = new Restfull;
      p = rest.get("settings");
      p.done(function(data) {
        if (data && data.error) {
          return alert(data.error);
        } else if (data) {
          _this.conference.dates(data.dates);
          _this.conference.fullTitle(data.fullTitle);
          _this.conference.shortTitleSource(data.shortTitleSource);
          _this.conference.monographyMin(data.monographyMin);
          _this.conference.monographyMax(data.monographyMax);
          return _this.conference.costByMonographyPage(data.costByMonographyPage);
        }
      });
      this.monographyPages = ko.observable(this.conference.monographyMin());
      this.user = {
        name: ko.observable(""),
        surname: ko.observable(""),
        patronymic: ko.observable(""),
        academicDegree: ko.observable(""),
        academicTitle: ko.observable(""),
        jobPosition: ko.observable(""),
        jobPlace: ko.observable(""),
        city: ko.observable(""),
        country: ko.observable("Украина"),
        postalAddress: ko.observable(""),
        email: ko.observable(""),
        phone: ko.observable(""),
        participantType: ko.observable(""),
        lectureTitle: ko.observable(""),
        sectionNumber: ko.observable(""),
        monographyParticipant: ko.observable(false),
        monographyTitle: ko.observable(""),
        monographyPages: ko.computed(function() {
          return parseInt(_this.monographyPages());
        }),
        stayDemand: ko.observable(false),
        stayStart: ko.observable(new Date(this.start)),
        stayEnd: ko.observable(new Date(this.end)),
        thesisPay: ko.observable(0),
        monographyPay: ko.observable(0)
      };
      this.files = new FilesViewModel;
      this.searchData = window.searchData;
      this.errors = ko.validation.group(this.user);
      this.errorAlert = new Alert("#needFixErrors");
      this.rest = new Restfull("");
      this.anotherWrapper = function(what) {
        return "Другое (" + what + ")";
      };
      this.selectQuery = function(searchData, anotherAllowed) {
        if (anotherAllowed == null) {
          anotherAllowed = true;
        }
        return function(query) {
          var data;

          data = _this.searchData[searchData].filter(function(x) {
            return x.toLowerCase().match(query.term.toLowerCase());
          });
          if (anotherAllowed) {
            data.push(_this.anotherWrapper(query.term));
          }
          return query.callback({
            results: $.map(data, function(x) {
              var obj;

              return obj = {
                id: x,
                text: x
              };
            })
          });
        };
      };
      this.detected = ko.observable({});
      this.geoipWrapper = function(v, t) {
        if (t === "city") {
          return "Город (" + v + ")";
        } else {
          return "Страна (" + v + ")";
        }
      };
      this.geoip = new Geoip(function(detected) {
        return setTimeout(function() {
          var $city, $country, detect;

          detect = _this.detected();
          detect.country = _this.geoipWrapper(detected.country, "country");
          detect.city = _this.geoipWrapper(detected.city, "city");
          _this.detected(detect);
          _this.user.country(_this.geoipWrapper(detected.country, "country"));
          _this.user.city(_this.geoipWrapper(detected.city, "city"));
          $city = $("#city");
          $city.select2("val", "detected_city");
          $country = $("#country");
          return $country.select2("val", "detected_country");
        }, 1000);
      });
      this.defaultInitSelection = function(element, callback) {
        var $element, data, detected, val;

        $element = $(element);
        val = $element.val();
        if (val.match("detected_")) {
          detected = val.replace("detected_", "");
          data = {
            id: "detected",
            text: _this.detected()[detected]
          };
        } else {
          data = {
            id: val,
            text: val
          };
        }
        return callback(data);
      };
      this.detectDiscarded = function(key) {
        return ko.computed(function() {
          if (_this.user[key]()) {
            return true;
          }
          if (!_this.detected()[key]) {
            return true;
          }
          return false;
        });
      };
      this.z_participantType = ko.computed(function() {
        return _this.user.participantType();
      });
      this.mainCost = ko.computed(function() {
        return _this.searchData.costByParticipantType[_this.z_participantType()];
      });
      this.totalCost = ko.computed(function() {
        var cost;

        cost = _this.mainCost();
        if (_this.user.monographyParticipant()) {
          return cost += _this.conference.costByMonographyPage() * _this.user.monographyPages();
        }
      });
    }

    RegistrationViewModel.prototype.doRegister = function() {
      var button, creating, p;

      this.addValidation();
      if (this.errors().length === 0) {
        this.user.thesisPay(this.thesisPay());
        this.user.monographyPay(this.monographyPay());
        creating = new User;
        creating.fromData(ko.mapping.toJS(this.user));
        creating.uploadId = this.files.uploadId();
        if (!this.detectDiscarded("city")()) {
          creating.city = this.detected().city;
        }
        if (!this.detectDiscarded("country")()) {
          creating.country = this.detected().country;
        }
        creating.participantType = this.z_participantType();
        console.log(creating.getData());
        p = creating.create();
        button = $(".form-signin .btn-primary");
        button.button("loading");
        return p.done(function(data) {
          if (data) {
            if (data.error) {
              alert(data.error);
              button.button("reset");
              return;
            }
          }
          button.button("reset");
          return global.location = "success.html";
        });
      } else {
        this.errorAlert.show();
        return this.errors.showAllMessages();
      }
    };

    RegistrationViewModel.prototype.isAvailableDateToStay = function(date) {
      console.log(date);
      return true;
    };

    RegistrationViewModel.prototype.addValidation = function() {
      this.makeFieldsRequired();
      return this.hasValidation = true;
    };

    RegistrationViewModel.prototype.makeFieldsRequired = function() {
      var isRequired, key, value, _ref,
        _this = this;

      console.log("validation?");
      _ref = this.user;
      for (key in _ref) {
        value = _ref[key];
        if (!(value.extend != null)) {
          continue;
        }
        isRequired = true;
        if (key === "stayStart" || key === "stayEnd") {
          isRequired = {
            onlyIf: this.user.stayDemand
          };
        }
        if (key === "monographyTitle" || key === "monographyPages") {
          isRequired = {
            onlyIf: this.user.monographyParticipant
          };
        }
        if (key === "city" || key === "country") {
          isRequired = {
            onlyIf: this.detectDiscarded(key)
          };
        }
        if (key === "monographyParticipant" || key === "stayDemand" || key === "monographyPages") {
          isRequired = false;
        }
        if (value != null) {
          value.extend({
            required: isRequired
          });
        }
      }
      this.user.stayDemand.subscribe(function(value) {
        ko.validation.validateObservable(_this.user.stayStart);
        return ko.validation.validateObservable(_this.user.stayEnd);
      });
      this.user.monographyParticipant.subscribe(function(value) {
        return ko.validation.validateObservable(_this.user.monographyTitle);
      });
      this.detected.subscribe(function(value) {
        return _this.makeFieldsRequired();
      });
      this.user.city.subscribe(function(value) {
        return _this.makeFieldsRequired();
      });
      return this.user.country.subscribe(function(value) {
        return _this.makeFieldsRequired();
      });
    };

    return RegistrationViewModel;

  })();

}).call(this);
