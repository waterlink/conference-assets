// Generated by CoffeeScript 1.6.2
(function() {
  global.Restfull = require("../classes/restfull");

  window.UserViewModel = (function() {
    function UserViewModel(user) {
      var _this = this;

      this["default"] = user;
      _.extend(this, user);
      this.surname = ko.observable(this.surname);
      this.name = ko.observable(this.name);
      this.patronymic = ko.observable(this.patronymic);
      this.academicDegree = ko.observable(this.academicDegree);
      this.academicTitle = ko.observable(this.academicTitle);
      this.jobPosition = ko.observable(this.jobPosition);
      this.jobPlace = ko.observable(this.jobPlace);
      this.city = ko.observable(this.city);
      this.country = ko.observable(this.country);
      this.postalAddress = ko.observable(this.postalAddress);
      this.email = ko.observable(this.email);
      this.phone = ko.observable(this.phone);
      this.participantType = ko.observable(this.participantType);
      this.lectureTitle = ko.observable(this.lectureTitle);
      this.sectionNumber = ko.observable(this.sectionNumber);
      this.fullName = ko.computed({
        read: function() {
          return "" + (_this.surname() || '') + " " + (_this.name() || '') + " " + (_this.patronymic() || '');
        },
        write: function(v) {
          var words;

          words = v.split(" ").filter(function(x) {
            return x;
          });
          _this.surname(words[0] || _this.surname());
          _this.name(words[1] || _this.name());
          return _this.patronymic(words[2] || _this.patronymic());
        }
      });
      this.status = ko.observable(this.status);
      this._monographyParticipant = ko.observable(this.monographyParticipant);
      this.monographyParticipant = ko.computed({
        read: function() {
          return _this._monographyParticipant() && _this._monographyParticipant() !== "0";
        },
        write: function(v) {
          return _this._monographyParticipant(v);
        }
      });
      this.monographyTitle = ko.observable(this.monographyTitle || "");
      this._stayDemand = ko.observable(this.stayDemand);
      this.stayDemand = ko.computed({
        read: function() {
          return _this._stayDemand() && _this._stayDemand() !== "0";
        },
        write: function(v) {
          return _this._stayDemand(v);
        }
      });
      if (this.stayStart) {
        this._stayStart = new Date;
        this._stayStart.setMonth(this.stayStart.split("/")[0] - 1);
        this._stayStart.setDate(this.stayStart.split("/")[1]);
        this._stayStart.setFullYear(this.stayStart.split("/")[2]);
      }
      if (this.stayEnd) {
        this._stayEnd = new Date;
        this._stayEnd.setMonth(this.stayEnd.split("/")[0] - 1);
        this._stayEnd.setDate(this.stayEnd.split("/")[1]);
        this._stayEnd.setFullYear(this.stayEnd.split("/")[2]);
      }
      this._stayStart = ko.observable(this._stayStart || "");
      this._stayEnd = ko.observable(this._stayEnd || "");
      this.extract = function(d) {
        return [d.getMonth() + 1, d.getDate(), d.getFullYear()];
      };
      this.stayStart = ko.computed({
        read: function() {
          if (_this._stayStart()) {
            return _this.extract(_this._stayStart()).join('/');
          }
          return "";
        },
        write: function(v) {
          return _this._stayStart(v);
        }
      });
      this.stayEnd = ko.computed({
        read: function() {
          if (_this._stayEnd()) {
            return _this.extract(_this._stayEnd()).join('/');
          }
          return "";
        },
        write: function(v) {
          return _this._stayEnd(v);
        }
      });
      this.locStatus = ko.computed(function() {
        return statuses[_this.status()];
      });
      this.mailto = ko.computed(function() {
        return "mailto:" + _this.email;
      });
      this.nextStatus = ko.computed(function() {
        return statuses[statusGraph.next[_this.status()]];
      });
      this.prevStatus = ko.computed(function() {
        return statuses[statusGraph.prev[_this.status()]];
      });
      this.fullJob = ko.computed(function() {
        return "" + _this.jobPosition + " в " + _this.jobPlace + " г. " + _this.city + ", " + _this.country;
      });
      this.z_monographyTitle = ko.computed(function() {
        return _this.monographyTitle();
      });
      this.z_stayStart = ko.computed(function() {
        return _this.stayStart();
      });
      this.z_stayEnd = ko.computed(function() {
        return _this.stayEnd();
      });
      this.isMonographyParticipant = ko.computed(function() {
        return _this.monographyParticipant() && _this.monographyParticipant() !== "0";
      });
      this.isStayDemand = ko.computed(function() {
        return _this.stayDemand && _this.stayDemand !== "0";
      });
      this.z_participantType = ko.computed(function() {
        return _this.participantType || "";
      });
      this.downloadLink = ko.computed(function() {
        return "/uploads/download/" + _this.id;
      });
    }

    UserViewModel.prototype.details = function() {
      return cpanel.userDetails(this.id);
    };

    UserViewModel.prototype.goNextStatus = function() {
      var nextAction, onError, p,
        _this = this;

      nextAction = statusGraph.next[this.status()];
      if (nextAction) {
        p = cpanel.userStatus(this.id, nextAction);
        $(".user-table-row[user_id=\"" + this.id + "\"] .user-actions .dropdown-toggle").button("loading");
        onError = function() {
          return $(".user-table-row[user_id=\"" + _this.id + "\"] .user-actions .dropdown-toggle").button("error");
        };
        p.done(function(e) {
          var user;

          if (e && e.error) {
            return onError();
          }
          user = new User;
          p = user.getById(_this.id);
          p.done(function(user) {
            if (!user || user.error) {
              return onError();
            }
            _this.status(user.status);
            return $(".user-table-row[user_id=\"" + _this.id + "\"] .user-actions .dropdown-toggle").button("reset");
          });
          return p.error(onError);
        });
        return p.error(onError);
      }
    };

    UserViewModel.prototype.goPrevStatus = function() {
      var onError, p, prevAction,
        _this = this;

      prevAction = statusGraph.prev[this.status()];
      if (prevAction) {
        p = cpanel.userStatus(this.id, prevAction);
        $(".user-table-row[user_id=\"" + this.id + "\"] .user-actions .dropdown-toggle").button("loading");
        onError = function() {
          return $(".user-table-row[user_id=\"" + _this.id + "\"] .user-actions .dropdown-toggle").button("error");
        };
        p.done(function(e) {
          var user;

          if (e && e.error) {
            return onError();
          }
          user = new User;
          p = user.getById(_this.id);
          p.done(function(user) {
            if (!user || user.error) {
              return onError();
            }
            _this.status(user.status);
            return $(".user-table-row[user_id=\"" + _this.id + "\"] .user-actions .dropdown-toggle").button("reset");
          });
          return p.error(onError);
        });
        return p.error(onError);
      }
    };

    UserViewModel.prototype.getData = function() {
      var k, res;

      res = {
        name: this.name(),
        surname: this.surname(),
        patronymic: this.patronymic(),
        participant: this.participant,
        status: this.status(),
        academicDegree: this.academicDegree(),
        academicTitle: this.academicTitle(),
        jobPosition: this.jobPosition(),
        jobPlace: this.jobPlace(),
        city: this.city(),
        country: this.country(),
        postalAddress: this.postalAddress(),
        email: this.email(),
        phone: this.phone(),
        participantType: this.participantType(),
        lectureTitle: this.lectureTitle(),
        sectionNumber: this.sectionNumber(),
        monographyParticipant: this.monographyParticipant(),
        stayDemand: this.stayDemand(),
        uploadId: this.uploadId
      };
      if (this.monographyParticipant()) {
        res["monographyTitle"] = this.monographyTitle();
      }
      if (this.stayDemand()) {
        res["stayStart"] = this.stayStart();
        res["stayEnd"] = this.stayEnd();
      }
      for (k in res) {
        if (res[k] === void 0 || res[k] === "" || res[k] === null) {
          res[k] = this["default"][k];
        }
      }
      return res;
    };

    UserViewModel.prototype.doSave = function(d, e) {
      var $e, p, rest,
        _this = this;

      console.log(this.getData());
      $e = $(e.target);
      $e.button("loading");
      rest = new Restfull;
      p = rest.put(["user", "" + this.id], this.getData());
      return p.done(function(e) {
        if (e && e.error) {
          alert(e.error);
        }
        return $e.button("reset");
      });
    };

    return UserViewModel;

  })();

  module.exports = window.UserViewModel;

}).call(this);
