// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  global.Restfull = require("../classes/restfull");

  global.Auth = require("../classes/auth");

  window.PrintViewModel = (function() {
    function PrintViewModel() {
      this.toExcel = __bind(this.toExcel, this);
      this.redirectToLogin = __bind(this.redirectToLogin, this);
      this.loadData = __bind(this.loadData, this);      this.rest = new Restfull;
      this.auth = new Auth(this.rest);
      this.auth.login({
        ok: this.loadData,
        fail: this.redirectToLogin
      });
      this.users = ko.observableArray();
      this.exported = ko.observable(false);
      this.exportHref = ko.observable("");
    }

    PrintViewModel.prototype.loadData = function() {
      var data, p, status,
        _this = this;

      status = global.location.hash.replace("#", "");
      data = {};
      if (status) {
        data["status"] = status;
      }
      p = this.rest.get("user", data);
      return p.done(function(users) {
        var user, _i, _len, _ref, _results;

        _ref = users.reverse();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          _results.push(_this.users.push(new UserViewModel(user)));
        }
        return _results;
      });
    };

    PrintViewModel.prototype.redirectToLogin = function() {
      return global.location = "login.html#print.html";
    };

    PrintViewModel.prototype.toExcel = function() {
      var $table, colcount, data, rowcount, table, worksheet, xml, xmldata, xmltable;

      $table = $("#toprint");
      colcount = $table.find("th").length;
      rowcount = $table.find("tr").length;
      table = $table[0];
      xmldata = $("<p>");
      xml = $("<ss:Workbook>");
      xml.attr("xmlns:ss", "urn:schemas-microsoft-com:office:spreadsheet");
      worksheet = $("<ss:Worksheet ss:Name=\"Sheet1\">");
      worksheet.appendTo(xml);
      xmltable = $("<ss:Table>");
      xmltable.appendTo(worksheet);
      $table.find("tr").each(function() {
        var $row, row;

        $row = $(this);
        row = $("<ss:Row>");
        $row.find("th").each(function() {
          var $th, cell, ch, data, i, th, _i, _len;

          $th = $(this);
          th = $th.text();
          data = "";
          i = 0;
          for (_i = 0, _len = th.length; _i < _len; _i++) {
            ch = th[_i];
            ++i;
            data = data + ch;
            if (i % 10 === 0) {
              data = data + "\n";
            }
          }
          cell = $('<ss:Cell>');
          data = $("<ss:Data ss:Type=\"String\">" + data + "</ss:Data>");
          data.appendTo(cell);
          return cell.appendTo(row);
        });
        $row.find("td").each(function() {
          var $th, cell, ch, data, i, th, _i, _len;

          $th = $(this);
          th = $th.text();
          data = "";
          i = 0;
          for (_i = 0, _len = th.length; _i < _len; _i++) {
            ch = th[_i];
            ++i;
            data = data + ch;
            if (i % 25 === 0) {
              data = data + "\n";
            }
          }
          cell = $('<ss:Cell>');
          data = $("<ss:Data ss:Type=\"String\">" + data + "</ss:Data>");
          data.appendTo(cell);
          return cell.appendTo(row);
        });
        return row.appendTo(xmltable);
      });
      xmldata.append(xml);
      data = xmldata.html();
      data = data.replace(/ss:workbook/g, "ss:Workbook");
      data = data.replace(/ss:worksheet/g, "ss:Worksheet");
      data = data.replace(/ss:table/g, "ss:Table");
      data = data.replace(/ss:row/g, "ss:Row");
      data = data.replace(/ss:cell/g, "ss:Cell");
      data = data.replace(/ss:data/g, "ss:Data");
      data = data.replace(/ss:name/g, "ss:Name");
      data = data.replace(/ss:type/g, "ss:Type");
      data = encodeURIComponent("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + data);
      this.exportHref("data:application/vnd.ms-excel;charset=utf-8," + data);
      this.exported(true);
      return console.log(this.exportHref());
    };

    return PrintViewModel;

  })();

}).call(this);
