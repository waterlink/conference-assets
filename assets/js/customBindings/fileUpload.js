// Generated by CoffeeScript 1.6.2
(function() {
  ko.bindingHandlers.fileUpload = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
      var $element, args, files, initialize, initialized, max, options, _ref, _ref1;

      args = valueAccessor();
      _ref = [args.files, args.options], files = _ref[0], options = _ref[1];
      $element = $(element);
      _ref1 = [options.maxNumberOfFiles, false], max = _ref1[0], initialized = _ref1[1];
      initialize = function() {
        var p,
          _this = this;

        console.log($element);
        console.log($element.attr("data-url"));
        if (!this.initialized) {
          this.rest = new Restfull("");
          p = this.rest.get("uploads/id");
          return p.done(function(upload) {
            $element.attr("data-url", "/uploads/index/" + upload.id);
            console.log($element.attr("data-url"));
            viewModel.uploadId(upload.id);
            $element.fileupload(_.extend(options, {
              maxNumberOfFiles: (max != null ? max - files().length + !!initialized : void 0),
              added: function(e, data) {
                var f, _i, _len, _ref2, _results;

                _ref2 = data.files;
                _results = [];
                for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                  f = _ref2[_i];
                  f.loaded = ko.observable("0%");
                  _results.push(files.push(f));
                }
                return _results;
              },
              process: [
                {
                  action: "load"
                }
              ],
              progress: function(e, data) {
                var f, _i, _len, _ref2, _results;

                _ref2 = data.files;
                _results = [];
                for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                  f = _ref2[_i];
                  _results.push(f.loaded(parseInt(data.loaded * 100 / data.total, 10) + "%"));
                }
                return _results;
              }
            }));
            return initialized = true;
          });
        }
      };
      initialize();
      return viewModel.validate = function(files) {
        initialize();
        return $element.fileupload("validate", files);
      };
    }
  };

}).call(this);
